{"version":3,"sources":["reportWebVitals.js","Dashboard.jsx","EmailSender/Home.jsx","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","projects","title","description","company","logo","backgroundColor","documentation","Dashboard","theme","useTheme","Grid","container","spacing","justifyContent","alignItems","sx","height","padding","map","p","md","item","Card","variant","CardMedia","style","width","src","alt","CardContent","Typography","gutterBottom","component","color","CardActions","Button","href","disabled","startIcon","Code","inputs","label","multiline","EmailSender","React","useState","recipients","setRecipients","console","log","lg","CardHeader","avatar","Avatar","Mail","subheader","xs","Autocomplete","multiple","freeSolo","id","options","defaultValue","onChange","event","value","renderTags","getTagProps","option","index","Chip","renderInput","params","TextField","input","name","toLowerCase","fullWidth","minRows","Send","Delete","createTheme","palette","primary","main","ReactDOM","render","StrictMode","CssBaseline","ThemeProvider","exact","path","to","document","getElementById"],"mappings":"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","file":"static/js/main.a15d7777.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport Grid from \"@mui/material/Grid\";\nimport { useTheme } from \"@mui/material/styles\";\nimport Typography from \"@mui/material/Typography\";\nimport { Code } from \"@mui/icons-material\";\n\nconst baseURI = \"https://github.com/nicklasfrahm/showcases\";\n\nconst projects = [\n  {\n    title: \"Email Sender\",\n    description:\n      \"Send emails and simulate automatic failover in case of an external service provider failure.\",\n    company: \"Dreamdata\",\n    logo: \"https://images.squarespace-cdn.com/content/v1/60880c8985e48a388d33bd16/1620732746386-HBC3RQJ55P25GMJ9PUY6/dreamdata.png\",\n    backgroundColor: \"#b8dae5\",\n    documentation: baseURI,\n  },\n];\n\nconst Dashboard = () => {\n  const theme = useTheme();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{\n        height: \"100vh\",\n        padding: theme.spacing(2),\n      }}\n    >\n      {projects.map((p) => (\n        <Grid md={3} item key={p.title}>\n          <Card variant=\"outlined\">\n            <CardMedia>\n              <Grid\n                container\n                spacing={2}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                sx={{ height: \"200px\", backgroundColor: p.backgroundColor }}\n              >\n                <img style={{ width: \"80%\" }} src={p.logo} alt={p.title} />\n              </Grid>\n            </CardMedia>\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {p.title}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {p.description}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              {/* TODO: Connect this to the authentication provider. */}\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                href={p.documentation}\n                disabled={false}\n                startIcon={<Code variant=\"rouded\" />}\n              >\n                View on GitHub\n              </Button>\n            </CardActions>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport Chip from \"@mui/material/Chip\";\nimport Grid from \"@mui/material/Grid\";\nimport TextField from \"@mui/material/TextField\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Mail, Send, Delete } from \"@mui/icons-material\";\n\nconst inputs = [{ label: \"Subject\" }, { label: \"Content\", multiline: true }];\n\nconst EmailSender = () => {\n  const theme = useTheme();\n  const [recipients, setRecipients] = React.useState([]);\n\n  const onRecipients = (event, value) => {\n    setRecipients(value);\n  };\n\n  console.log(recipients);\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      sx={{\n        height: \"100vh\",\n        padding: theme.spacing(2),\n      }}\n    >\n      <Grid item lg={3}>\n        <Card variant=\"outlined\">\n          <CardHeader\n            avatar={\n              <Avatar>\n                <Mail variant=\"rounded\" />\n              </Avatar>\n            }\n            title=\"Email\"\n            subheader=\"Send an email\"\n          />\n          <CardContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Autocomplete\n                  multiple\n                  freeSolo\n                  id=\"recipients\"\n                  options={[]}\n                  defaultValue={[]}\n                  onChange={onRecipients}\n                  renderTags={(value, getTagProps) =>\n                    value.map((option, index) => (\n                      <Chip\n                        variant=\"outlined\"\n                        label={option}\n                        {...getTagProps({ index })}\n                      />\n                    ))\n                  }\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Recipients\"\n                    />\n                  )}\n                />\n              </Grid>\n              {inputs.map((input) => (\n                <Grid item xs={12} key={input.label}>\n                  <TextField\n                    name={input.label.toLowerCase()}\n                    label={input.label}\n                    fullWidth\n                    minRows={!!input.multiline ? 4 : 0}\n                    multiline={!!input.multiline}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n          <CardActions>\n            <Button startIcon={<Send variant=\"rounded\" />} variant=\"contained\">\n              Send\n            </Button>\n            <Button startIcon={<Delete variant=\"rounded\" />} variant=\"outlined\">\n              Discard\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default EmailSender;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Switch, Redirect, Route, BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Dashboard from \"./Dashboard\";\nimport EmailSender from \"./EmailSender/Home\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#455a64\",\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <ThemeProvider theme={theme}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Dashboard} />\n          <Route exact path=\"/email-sender\" component={EmailSender} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </BrowserRouter>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
name: services

on:
  push:
    branches:
      - main
    paths:
      - go.mod
      - go.sum
      - Makefile
      - build/package/**
      - deployments/**
      - .github/workflows/services.yml
      - "**/**.go"
    tags:
      - v*
  pull_request:
    branches:
      - main
    paths:
      - go.mod
      - go.sum
      - Makefile
      - build/package/**
      - deployments/**
      - .github/workflows/services.yml
      - "**/**.go"
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  NAMESPACE: showcases-production
  REGISTRY: ghcr.io
  REPOSITORY: ghcr.io/${{ github.repository }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - audit
          - gateway-http
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Generate container metadata
        id: meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.REPOSITORY }}-${{ matrix.service }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        uses: docker/build-push-action@v2
        with:
          file: build/package/service.dockerfile
          cache-from: type=registry,ref=${{ env.REPOSITORY }}-${{ matrix.service }}:main
          cache-to: type=inline
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.sha }}
            SERVICE=${{ matrix.service }}

  nats:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install nats
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} || true
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm repo update
          helm upgrade nats nats/nats --atomic -i -n ${{ env.NAMESPACE }} -f deployments/helm/nats.yml

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - audit
          - gateway-http
    environment:
      name: production
    needs:
      - nats
      - build
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Install helm
        uses: azure/setup-helm@v1

      - name: Set up kubeconfig
        run: |
          mkdir -m 700 -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Install service deployment
        run: |
          envsubst < deployments/kubernetes/service.yml | kubectl apply -f -
          envsubst < deployments/kubernetes/service-${{ matrix.service }}.yml | kubectl apply -f -
          kubectl --namespace=$NAMESPACE rollout status --timeout=60s deployment $SERVICE
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          SERVICE: ${{ matrix.service }}
